#!/usr/bin/env php
<?php

/*
 *	Runs a daemon that evaluates the state of business every minute
 */

// debug mode
define('DEBUG', false);

if(DEBUG) {
	define('TIMEOUT', 5); // Timeout in seconds
	define('LOGFILE', '../tmplog/logic.log');
	define('INTERVAL', 5); // heating interval per second
	define('ACTIVE_TILL_FILE', '../tmplog/activeTill.dat');
	define('TEMPLOG', '../tmplog/temp.log');

	include('../common/tempd_client_stub.php');
	include('../common/heaterd_client_stub.php');
} else {
	define('TIMEOUT', 60); // Timeout in seconds
	define('LOGFILE', '/var/log/verwarmd/logic.log');
	define('INTERVAL', 20*60); // heating interval per second
	define('ACTIVE_TILL_FILE', '/var/log/verwarmd/activeTill.dat');
	define('TEMPLOG', '/var/log/verwarmd/temp.log');
	
	include('../common/tempd_client.php');
	include('../common/heaterd_client.php');
}

define('INACTIVE_TEMP', 14);
define('MAX_TEMP', 25);
define('MODE_INACTIVE', 'inactive');
define('MODE_ACTIVE', 'active');

include('../common/log.class.php');
include('../common/external_temp.php');

$log = new Log(LOGFILE);

$log->log('Started logicd');

// Define initial state
$state = array(
	'cur_temp' => 0,
	'cur_state' => 0,
	'mode' => MODE_INACTIVE,
	'last_on' => 0,
	'last_off' => 0,
	'active_until' => 0
);

while(true) {

	$next_wakeup = time() + TIMEOUT;

	$state['cur_temp'] = tempd_get_temperature();
	$state['cur_state'] = heaterd_get();

	$state['active_until'] = intval(trim(file_get_contents(ACTIVE_TILL_FILE)));

	$state['mode'] = (($state['active_until'] > time()) ? MODE_ACTIVE : MODE_INACTIVE);

	$log->log('Current state: temp '.$state['cur_temp'].', state: '.($state['cur_state'] === true ? 'on' : 'off').', mode: '.$state['mode']);

	if(($state['mode'] === MODE_ACTIVE) && ($state['active_until'] <= time())) {
		$state['mode'] = MODE_INACTIVE;

		if($state['cur_state'] === true) {
			heaterd_off();
			$state['cur_state'] = false;
			$state['last_off'] = time();
			$log->log('Heater turned off. Reason: not in active mode anymore');
		}
	}

	// Enforce inactive mode
	if($state['mode'] == MODE_INACTIVE) {

		// If heater has been on for INTERVAL seconds, turn off
		if(($state['cur_state'] === true) && ((time() - $state['last_on']) > INTERVAL)) {
			heaterd_off();
			$state['last_off'] = time();
			$log->log('Heater turned off. Reason: on for '.(time() - $state['last_on']).' seconds');
		}

		/// If temperature below INACTIVE_TEMP and heater has been off for INTERVAL, turn on
		if(($state['cur_temp'] < INACTIVE_TEMP) &&
			($state['cur_state'] === false) &&
			((time() - $state['last_off']) > INTERVAL))
		{
			heaterd_on();
			$state['last_on'] = time();
			$log->log('Heater turned on. Reason: below minimum temperature');
		}
	} else { // Enforce active temperature

		// If heater on and above MAX_TEMP, turn off
		if(($state['cur_state'] === true) && ($state['cur_temp'] >= MAX_TEMP)) {
			heaterd_off();
			$state['last_off'] = time();
			$log->log('Heater turned off. Reason: too hot');
		}

		// if heater off, and below MAX_TEMP
		if(($state['cur_state'] === false) &&
			($state['cur_temp'] < MAX_TEMP) &&
			($state['active_until'] > time()))
		{
			heaterd_on();
			$state['last_on'] = time();
			$log->log('Heater turned on. Reason: Active mode for '.($state['active_until'] - time()).' seconds'); // TODO until
		}

	}

	$externaltemp = get_external_temp($log);

	// Log data for graphs
	$tlog = fopen(TEMPLOG, 'a');
	fwrite($tlog, time() .' '. $state['cur_temp'] .' '. ($state['mode'] == MODE_ACTIVE ? MAX_TEMP : INACTIVE_TEMP) .' '. intval($state['cur_state']) . ' '. $externaltemp ."\n");
	fclose($tlog);

	if(($next_wakeup - time()) <= 0) {
		$log->log('Skipped a beat??');
		$next_wakeup += TIMEOUT;
	}

	sleep($next_wakeup - time());
}
